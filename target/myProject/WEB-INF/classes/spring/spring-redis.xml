<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xmlns:p="http://www.springframework.org/schema/p"
		xmlns:context="http://www.springframework.org/schema/context" 
		xsi:schemaLocation="
			http://www.springframework.org/schema/beans 
			http://www.springframework.org/schema/beans/spring-beans.xsd
			http://www.springframework.org/schema/context 
			http://www.springframework.org/schema/context/spring-context.xsd">
    
    <context:component-scan base-package="redis"></context:component-scan>
    
	<!-- 单节点 -->	
	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<!-- 控制一个pool（池）可分配多少个jedis实例，通过pool.getResource()来获取；如果赋值为-1，则表示不限制 -->
        <property name="maxTotal" value="${redis.maxTotal}" />

        <!-- 控制一个pool（池）最多有多少个状态为idle(空闲)的jedis实例 -->
        <property name="maxIdle" value="${redis.maxIdle}" />

        <!-- 表示当borrow（借用）一个jedis实例时，最大的等待时间，如果超过等待时间，则直接抛出JedisConnectionException -->
        <property name="maxWaitMillis" value="${redis.maxWaitMillis}" />

        <!-- 在borrow（借用）一个jedis实例时，是否提前进行validate（验证）操作；如果为true，则得到的jedis实例均是可用的 -->
        <property name="testOnBorrow" value="${redis.testOnBorrow}" />

        <!-- 在return(返回)给pool（池）时，是否提前进行validate（验证）操作 -->
        <property name="testOnReturn" value="${redis.testOnReturn}" />
    </bean>

	<bean id="jedisConnectionFactory" p:pool-config-ref="jedisPoolConfig" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
		<property name="hostName"  value="${redis.hostName}" /> 
		<property name="port"  value="${redis.port}" /> 
	</bean>
	
	<!-- Configurer that replaces ${...} placeholders with values from a properties file -->
	
	<context:annotation-config />

	<context:component-scan base-package="org.springframework.data.redis.samples"/>
	
	<bean id="stringRedisSerializer" class="org.springframework.data.redis.serializer.StringRedisSerializer"></bean>
	
	<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate" 
		p:connection-factory-ref="jedisConnectionFactory" 		
		p:keySerializer-ref="stringRedisSerializer"   
        p:hashKeySerializer-ref="stringRedisSerializer"/>
	
</beans>